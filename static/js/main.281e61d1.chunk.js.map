{"version":3,"sources":["Header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","serviceWorker.js","index.js"],"names":["Header","props","className","heading","AddSusbscriber","inputChangeHandler","e","state","target","name","value","setState","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","Link","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubscribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersListToShow","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","subscribers","newSubscriber","length","Route","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAWeA,G,MARA,SAASC,GAChB,OACI,yBAAKC,UAAY,UACZD,EAAME,W,gBC4DRC,E,YA3DX,aAAe,IAAD,8BACV,+CAQJC,mBAAqB,SAACC,GAClB,IAAMC,EAAQ,EAAKA,MACnBA,EAAMD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,MAChC,EAAKC,SAASJ,IAZJ,EAedK,gBAAkB,SAACN,GACfA,EAAEO,iBACF,EAAKZ,MAAMa,qBAAqB,EAAKP,OACrC,EAAKI,SAAS,CACVI,GAAI,EACJN,KAAM,GACNO,MAAO,KAEX,EAAKf,MAAMgB,QAAQC,KAAK,MArBxB,EAAKX,MAAQ,CACTQ,GAAI,EACJN,KAAM,GACNO,MAAO,IALD,E,sEA0BJ,IAAD,EAEiBG,KAAKZ,MAApBE,EAFF,EAEEA,KAAMO,EAFR,EAEQA,MAEb,OACI,6BACI,kBAAC,EAAD,CAAQb,QAAQ,mBAChB,yBAAKD,UAAU,4BACX,kBAACkB,EAAA,EAAD,CAAMC,GAAG,KACL,4BAAQnB,UAAU,cAAlB,SAGJ,0BAAMA,UAAU,kBAAkBoB,SAAUH,KAAKP,gBAAgBW,KAAKJ,OAClE,2BAAOK,QAAQ,OAAOtB,UAAU,iBAAhC,UAA8D,6BAC9D,2BAAOa,GAAG,OAAOU,KAAK,OAAOvB,UAAU,gBAAgBO,KAAK,OAAOiB,SAAUP,KAAKd,qBAAqB,6BAAK,6BAC5G,2BAAOmB,QAAQ,QAAQtB,UAAU,iBAAjC,WAAgE,6BAChE,2BAAOa,GAAG,QAAQU,KAAK,OAAOvB,UAAU,gBAAgBO,KAAK,QAAQiB,SAAUP,KAAKd,qBAAqB,6BAAK,6BAE9G,yBAAKH,UAAU,6BACX,0BAAMA,UAAU,6BAAhB,4BAA2E,6BAC3E,0BAAMA,UAAU,mBAAhB,SAAyCO,GAAY,6BACrD,0BAAMP,UAAU,mBAAhB,UAA0Cc,GAAa,8BAG3D,4BAAQS,KAAK,SAASvB,UAAU,sBAAhC,c,GApDKyB,aC2CdC,G,kBAzCd,aAAe,IAAD,8BACb,+CAMDC,eAAiB,SAACC,GACjB,EAAK7B,MAAM8B,wBAAwBD,IANnC,EAAKvB,MAAQ,CACZyB,sBAAuB,IAHX,E,sEAWL,IAAD,OAEP,OACI,6BACF,kBAAC,EAAD,CAAQ7B,QAAQ,oBAChB,yBAAKD,UAAU,4BACd,kBAACkB,EAAA,EAAD,CAAMC,GAAG,QACA,4BAAQnB,UAAU,sBAAlB,QAED,yBAAKA,UAAU,oCACb,0BAAMA,UAAU,0BAAhB,QACA,0BAAMA,UAAU,2BAAhB,UAGCiB,KAAKlB,MAAMgC,gBAAgBC,KAAI,SAAAC,GAC7B,OAAO,yBAAKC,IAAKD,EAAIpB,GAAIb,UAAU,kBAChC,0BAAMA,UAAU,aAAaiC,EAAI1B,MACjC,0BAAMP,UAAU,aAAaiC,EAAInB,OAC7C,0BAAMd,UAAU,kCACf,4BAAQA,UAAU,wBAAwBmC,QAAS,EAAKR,eAAeN,KAAK,EAAMY,EAAIpB,KAAtF,qB,GAhCoBY,c,gBCyDfW,E,YAvDd,aAAe,IAAD,8BACb,+CAiBDP,wBAA0B,SAACD,GAC1B,IAAIG,EAAkB,EAAK1B,MAAM0B,gBAC7BM,EAAkB,EACtBN,EAAgBO,SAAQ,SAAUC,EAAYC,GAC1CD,EAAW1B,KAAOe,IACpBS,EAAkBG,KAFpB,gBAKA,IAAIC,EAAiBV,EACrBU,EAAeC,OAAOL,EAAiB,GACvC,EAAK5B,SAAS,CAACkC,YAAaF,KA5Bf,EA+Bd7B,qBAAuB,SAACgC,GACvB,IAAIb,EAAkB,EAAK1B,MAAM0B,gBAC7BA,EAAgBc,OAAS,EAC5BD,EAAc/B,GAAKkB,EAAgBA,EAAgBc,OAAO,GAAGhC,GAAK,EAElE+B,EAAc/B,GAAK,EAGpBkB,EAAgBf,KAAK4B,GACrB,EAAKnC,SAAS,CAACsB,gBAAiBA,KAtChC,EAAK1B,MAAQ,CACZ0B,gBAAiB,CAChB,CACClB,GAAI,EACJN,KAAM,oBACNO,MAAO,cAER,CACCD,GAAI,EACJN,KAAM,eACNO,MAAO,gBAZG,E,sEA2CJ,IAAD,OACR,OACC,kBAAC,IAAD,KACC,6BACC,kBAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAClD,GAAD,OAAW,kBAAC,EAAD,iBAAqBA,EAArB,CAA4BgC,gBAAiB,EAAK1B,MAAM0B,gBAAiBF,wBAAyB,EAAKA,8BAChJ,kBAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,OAAQ,WAAYlD,GAAZ,IAAEgB,EAAF,EAAEA,QAAF,OAAsB,kBAAE,EAAF,eAAgBA,QAASA,GAAahB,EAAtC,CAA6Ca,qBAAsB,EAAKA,iC,GAlDvGa,aCOTyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASN,OAAO,kBAAC,EAAD,MAAoBO,SAASC,eAAe,SD0HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.281e61d1.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './Header.css'\r\n\r\nconst Header = function(props){ \r\n        return(\r\n            <div className = \"header\">\r\n                {props.heading}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport './AddSubscriber.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass AddSusbscriber extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    inputChangeHandler = (e) => {\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    onFormSubmitted = (e) => {\r\n        e.preventDefault();\r\n        this.props.addSubscriberHandler(this.state);\r\n        this.setState({\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        });\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    render() {\r\n\r\n        const {name, phone} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Header heading=\"Add Subscriber\" />\r\n                <div className=\"component-body-container\">\r\n                    <Link to=\"/\">\r\n                        <button className=\"custom-btn\">Back</button>\r\n                    </Link>\r\n\r\n                    <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name: </label><br/>\r\n                        <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangeHandler}/><br/><br/>\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone: </label><br/>\r\n                        <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangeHandler}/><br/><br/>\r\n\r\n                        <div className=\"subscriber-info-container\">\r\n                            <span className=\"subscriber-to-add-heading\">Subscriber to be added: </span><br/>\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br/>\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br/>\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AddSusbscriber; ","import React, {Component} from 'react';\nimport Header from './Header';\nimport './ShowSubscribers.css';\nimport { Link } from 'react-router-dom';\n\nclass ShowSubscribers extends Component {\n\t\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsubscribersListToShow: []\n\t\t}\n\t}\n\n\tonDeletedClick = (subscriberId) => {\n\t\tthis.props.deleteSubscriberHandler(subscriberId);\n\t}\n\n\trender(){\n\n\t\treturn (\n    \t\t<div>\n\t\t\t\t<Header heading=\"Phone Directory\"/>\n\t\t\t\t<div className=\"component-body-container\">\n\t\t\t\t\t<Link to=\"/add\">\n        \t  \t\t\t<button className=\"custom-btn add-btn\">Add</button>\n\t\t\t\t\t</Link>\n    \t      \t\t<div className=\"grid-container heading-container\">\n\t        \t    \t<span className=\"grid-item name-heading\">Name</span>\n            \t\t\t<span className=\"grid-item phone-heading\">Phone</span>\n          \t\t\t</div>\n\t\t\t\t\t\t{\n            \t\t\t\tthis.props.subscribersList.map(sub => {\n             \t\t\t\t\treturn <div key={sub.id} className=\"grid-container\">\n                \t\t\t\t\t<span className=\"grid-item\">{sub.name}</span>\n                \t\t\t\t\t<span className=\"grid-item\">{sub.phone}</span>\n\t\t\t\t\t\t\t\t\t<span className=\"grid-item action-btn-container\">\n\t\t\t\t\t\t\t\t\t\t<button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this, sub.id)}>Delete</button>\n\t\t\t\t\t\t\t\t\t</span>\n              \t\t\t\t\t</div>\n            \t\t\t\t})\n\t\t\t\t\t\t}\n        \t\t</div>\n\t\t\t</div>\n\t\t  );\t  \t  \n\t}  \n}\n\nexport default ShowSubscribers;\n","import React, { Component } from \"react\";\r\nimport AddSubscriber from \"./AddSubscriber\";\r\nimport ShowSubscribers from \"./ShowSubscribers\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nclass PhoneDirectory extends Component{\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsubscribersList: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t\tname: \"Vibhushit Singhal\",\r\n\t\t\t\t\tphone: \"9999999999\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\tname: \"Varun Singla\",\r\n\t\t\t\t\tphone: \"8888888888\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteSubscriberHandler = (subscriberId) => {\r\n\t\tlet subscribersList = this.state.subscribersList;\r\n\t\tlet subscriberIndex = 0;\r\n\t\tsubscribersList.forEach(function (subscriber, index) {\r\n\t\t\tif(subscriber.id === subscriberId) {\r\n\t\t\t\tsubscriberIndex = index;\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tlet newSubscribers = subscribersList;\r\n\t\tnewSubscribers.splice(subscriberIndex, 1);\r\n\t\tthis.setState({subscribers: newSubscribers});\r\n\t}\r\n\r\n\taddSubscriberHandler = (newSubscriber) => {\r\n\t\tlet subscribersList = this.state.subscribersList;\r\n\t\tif (subscribersList.length > 0) {\r\n\t\t\tnewSubscriber.id = subscribersList[subscribersList.length-1].id + 1;\r\n\t\t} else {\r\n\t\t\tnewSubscriber.id = 1;\r\n\t\t}\r\n\r\n\t\tsubscribersList.push(newSubscriber);\r\n\t\tthis.setState({subscribersList: subscribersList});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<Router>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Route exact path=\"/\" render={(props) => <ShowSubscribers {...props} subscribersList={this.state.subscribersList} deleteSubscriberHandler={this.deleteSubscriberHandler}/>} />\r\n\t\t\t\t\t<Route exact path=\"/add\" render={({history}, props) => < AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler}/>} />\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default PhoneDirectory;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PhoneDirectory from './PhoneDirectory';\nimport * as serviceWorker from './serviceWorker';\nimport './common/common.css';\n\nReactDOM.render(<PhoneDirectory />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}